getwd()
dir()
dir
c = rbind(c(1, -1/4), c(-1/4, 1))
class(c)
c
solve(c)
solve(c)%*% c
ginv(c)
makeCacheMatrix <- function(x = matrix())
{
m<-NULL
set<-function(y, ...)
{
x<<-y
m<<-NULL
}
get<-function()x
setinverse<-function(inverse)m<<-inverse
getinverse<-function()m
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
m<-x$getinverse()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data<-x$get()
m<-solve(data,...)
x$setinverse(m)
m
}
y<-matrix(1:4,2,2)
y
x<-y
makeCacheMatrix(x)
x
get()
cacheSolve(x)
m
makeCacheMatrix <- function(x = matrix())
{
m<-NULL
set<-function(y, ...)
{
x<<-y
m<<-NULL
}
get<-function()x
setinverse<-function(inverse)m<<-inverse
getinverse<-function()m
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
x
m
y
makeCacheMatrix <- function(x = matrix())
{
m<-NULL
set<-function(y, ...)
{
x<<-y
m<<-NULL
}
get<-function()x
setinverse<-function(solve)m<<-solve
getinverse<-function()m
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
x
y
m
makeVector <- function(x = matrix())
{
m<-NULL
set<-function(y)
{
x<<-y
m<<-NULL
}
get<-function()x
setmean<-function(mean)m<<-mean
getmean<-function()m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
## Write a short comment describing this function
cachemean <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
m<-x$getmean()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data<-x$get()
m<-mean(data,...)
x$setmean(m)
m
}
makeVector <- function(x = numeric())
{
m<-NULL
set<-function(y)
{
x<<-y
m<<-NULL
}
get<-function()x
setmean<-function(mean)m<<-mean
getmean<-function()m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
## Write a short comment describing this function
cachemean <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
m<-x$getmean()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data<-x$get()
m<-mean(data,...)
x$setmean(m)
m
}
x
x<-numeric()
x
X<-c(1:4)
x
x<-c(1:4)
x
makevector(x)
makeVector(x)
cachemean(x)
cachemean(x,...)
cachemean(x, ...)
x
cachemean(x)
mean(x)
debug(cachemean)
cachemean(x)
q
x <- rnorm(1000000)
s <- summary(x)
print(s)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
dir
dir()
changeDir()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix
amatrix<-= makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix<-
z
amatrix<- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
cacheSolve
amatrix$getinverse()  # Returns matrix inverse
source('C:/files/corr.R')
myCachedMatrix <- makeCacheMatrix(matrix(c(0, -5, -4, 0), nrow=2, ncol=2, byrow=TRUE))
myCachedMatrix
myCachedMatrix <- makeCacheMatrix(matrix(c(0, -5, -4, 0), nrow=2, ncol=2, byrow=TRUE))
myCachedMatrix$getMatrix()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{
m<-NULL
set<-function(y, ...)
{
x<<-y
m<<-NULL
}
get<-function()x
setinverse<-function(solve)m<<-solve
getinverse<-function()m
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
m<-x$getinverse()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data<-x$get()
m<-solve(data,...)
x$setinverse(m)
m
}
myCachedMatrix <- makeCacheMatrix(matrix(c(0, -5, -4, 0), nrow=2, ncol=2, byrow=TRUE))
myCachedMatrix$getMatrix()
myCachedMatrix$getInverseMatrix()
makeCacheMatrix(matrix(c(0, -5, -4, 0), nrow=2, ncol=2, byrow=TRUE))
matrix(c(0, -5, -4, 0), nrow=2, ncol=2, byrow=TRUE)
x-matrix(c(0, -5, -4, 0), nrow=2, ncol=2, byrow=TRUE))
x<-matrix(c(0, -5, -4, 0), nrow=2, ncol=2, byrow=TRUE))
x<-matrix(c(0, -5, -4, 0), nrow=2, ncol=2, byrow=TRUE)
x
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
myCachedMatrix <- makeCacheMatrix(matrix(c(0, -5, -4, 0), nrow=2, ncol=2, byrow=TRUE))
myCachedMatrix$get()
cacheSolve(myCachedMatrix)
e
>
myCachedMatrix$getInverse()
myCachedMatrix$getInverse()
p<- matrix(11:14,2,2  )
pp<-makeCacheMatrix(p)
cacheSolve(pp)
s<-matrix(21:24,2 , 2)
ss<-makeCacheMatrix(s)
ss$setinverse(solve(s))
ss$getinverse()
cacheSolve(ss)
x
amatrix
amatrix
unclass(amatrix)
amatrix$get()
ls()
rm(x)
ls()
rm(amatrix)
ls()
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
